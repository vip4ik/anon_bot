import logging
import time

from aiogram import types, Dispatcher
from aiopayok import Payok
from sqlalchemy import select, update
from sqlalchemy.orm import sessionmaker

from anypay import Anypay
from app.data.config import Config
from app.keyboards.inline import PricesVip, BuyVip
from app.keyboards.reply import MainMenuMarkup
from app.models.purchase import Purchase
from app.models.user import User
from app.utils.purchases_utils import get_add_time, get_prices, get_times


async def payment_check(callback: types.CallbackQuery, callback_data: dict, db: sessionmaker, user: User):
    payment_id = (callback_data.get("payment_id"))
    # payment_id = 1515
    anypay = Anypay(
        merchant_id=Config.ANTPAY_merchant_id,
        amount=100,
        # —Ä–∞–Ω–¥–æ–º, –º–æ–∂–µ—Ç –∫–ª–∞—Å—Å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω , —Å–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ cheak_payment
        secret_key=Config.ANTPAY_secret_key,
        api_id=Config.ANTPAY_api_id,
        api_key=Config.ANTPAY_api_key
    )

    logging.info(f'Current paymendid: {payment_id}')

    try:
        transaction_status = await anypay.cheak_payment((payment_id))
        logging.info(f'Transaction status: {transaction_status}')
        if not transaction_status:
            await callback.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)
        else:
            await callback.answer()
            async with db() as session:
                purchase = await session.execute(select(Purchase).where(Purchase.Id == payment_id))
                purchase = purchase.first()

            purchase_sum = purchase[0].Sum

            async with db() as session:
                await session.execute(update(Purchase).where(Purchase.Id == payment_id).values(
                    Status=True
                ))
                await session.commit()

            add_time = get_add_time(purchase_sum)

            async with db() as session:
                await session.execute(update(User).where(User.UserId == callback.from_user.id).values(
                    Subscription=int(
                        time.time()) + add_time if user.Subscription <= time.time() else user.Subscription + add_time
                ))
                await session.commit()

            await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!")
            await callback.message.delete()

            # balance = await payok.get_balance()
            # await callback.bot.send_message("@" + Config.LOGS_DOMAIN,
            #                                 f"–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ VIP –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç {callback.from_user.get_mention()} –Ω–∞ {purchase_sum}‚ÇΩ"
            #                                 f"\n–ù–∞ –±–∞–ª–∞–Ω—Å–µ –∫–∞—Å—Å—ã: <b>{balance.balance}</b>")

    except Exception as e:
        logging.info(e)
        await callback.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)


async def buy_vip(callback: types.CallbackQuery, callback_data: dict, db: sessionmaker):
    await callback.answer()
    vip_type = int(callback_data.get("type"))

    vip_types = get_prices()
    vip_times = get_times()

    current_price = vip_types[vip_type - 1]
    user_id = callback.from_user.id

    # letters_and_digits = string.ascii_letters + string.digits

    anypay = Anypay(
        merchant_id=Config.ANTPAY_merchant_id,
        amount=current_price,
        secret_key=Config.ANTPAY_secret_key,
        api_id=Config.ANTPAY_api_id,
        api_key=Config.ANTPAY_api_key
    )

    purchase_id = str(anypay.get_pay_id())

    unix_time = int(time.time())

    async with db() as session:
        purchase = Purchase(Id=purchase_id, OwnerId=user_id, Sum=current_price, CreatedAt=unix_time)
        session.add(purchase)
        await session.commit()
        await session.refresh(purchase)
        purchase_id = purchase.Id

    url = anypay.create_payment_link()
    await callback.message.answer("‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã"
                                  f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±",
                                  reply_markup=BuyVip().get(url, (purchase_id)))


async def not_vip_access(message: types.Message):
    await message.answer(
        # photo="AgACAgIAAxkDAAG8nfdinLMj5joFiASPFX1A8Jrd1zvzYQACRb0xG_C36EgAAewasjB66vABAAMCAAN4AAMkBA",
        text="üèÜ <b>–°–¢–ê–¢–£–° VIP:</b>\n\n"
             "<i>üîç 1. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–∞—Ç—å –ø–æ –ø–æ–ª—É –∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É</i>\n"
             "<i>üîû 2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã</i>\n"
             "<i>üé• 3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ</i>", reply_markup=PricesVip().get())
    # await message.from_user.get_user_profile_photos(offset=0, limit=10)


def setup_vip(dp: Dispatcher):
    dp.register_message_handler(not_vip_access, text=[
        MainMenuMarkup.search_companion_gender_button
    ])
    dp.register_callback_query_handler(buy_vip, PricesVip.callback_data.filter())
    dp.register_callback_query_handler(payment_check, BuyVip.callback_data.filter())
