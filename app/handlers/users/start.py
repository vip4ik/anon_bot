import contextlib
import re
from typing import List

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils import exceptions
from aiogram.utils.exceptions import TelegramAPIError
from sqlalchemy import update
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker

from app.keyboards.inline import SetGenderKb, AnswerKb, SubscriptionForVal, AnswerVal
from app.keyboards.reply import MainMenuMarkup
from app.models.channel import Channel
from app.models.link import Link
from app.models.user import User
from app.states.user_states import Val

val_text = '‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∫ —á–µ–ª–æ–≤–µ–∫—É,' \
           ' –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.' \
           '\n\n' \
           '–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ –æ –Ω–µ–º –¥—É–º–∞–µ—à—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏' \
           ' —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π –æ–Ω –µ–≥–æ –ø–æ–ª—É—á–∏—Ç,' \
           ' –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ.' \
           '\n\n' \
           '<b>üìå –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É - —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∏–±—É–¥—å!</b>'


async def get_start_command(message: types.Message, db: sessionmaker, user: User, val, state: FSMContext):
    if user.Gender != 0:
        if user.Deactivated:
            async with db() as session:
                await session.execute(
                    f"UPDATE Users SET deactivated = false WHERE id = {message.chat.id}")
                await session.commit()

        async with db() as session:
            args = message.get_args()
            if args:
                ref_link = args.split(" ")[0]
                if re.match(re.compile(r'^val-\d+$'), ref_link):
                    user_id_val = int(ref_link.split("-")[1])
                    user_val = await session.scalar(select(User).where(User.UserId == user_id_val))
                    if user_val and user_id_val != message.chat.id:

                        await state.set_state(Val.SEND)
                        await state.update_data(user_val=user_id_val)

                        await message.answer(text=val_text)
                    else:
                        await message.answer("<i>–ù–∞–∂–º–∏</i> /next <i>–∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ!</i>",
                                             reply_markup=MainMenuMarkup().get())
                else:
                    await message.answer("<i>–ù–∞–∂–º–∏</i> /next <i>–∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ!</i>",
                                         reply_markup=MainMenuMarkup().get())

                    result_link = await session.execute(select(Link).where(Link.LinkTitle == ref_link))
                    parse_link = result_link.scalars().all()
                    if len(parse_link) > 0:
                        await session.execute(update(Link).where(Link.Id == parse_link[0].Id).values(
                            OldJoins=Link.OldJoins + 1
                        ))
                await session.commit()
            else:
                await message.answer("<i>–ù–∞–∂–º–∏</i> /next <i>–∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ!</i>",
                                     reply_markup=MainMenuMarkup().get())
        return
    if val:
        await state.set_state(Val.SEND)
        await state.update_data(user_val=val)
        await message.answer(text=val_text)
        return

    elif args := message.get_args():
        ref_link = args.split(" ")[0]
        if re.match(re.compile(r'^val-\d+$'), ref_link):
            user_id_val = int(ref_link.split("-")[1])
            async with db() as session:
                user_val = await session.scalar(select(User).where(User.UserId == user_id_val))

            if user_val and user_id_val != message.chat.id:
                await state.set_state(Val.SEND)
                await state.update_data(user_val=user_id_val)
                await message.answer(text=val_text)
                return

    if user.Gender == 0:

        await message.answer("‚úàÔ∏è –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=SetGenderKb().get())

    elif user.Age == 0:

        await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")


async def get_subscription_msg(m: types.Message, sub_info: List[Channel], state: FSMContext):
    await state.update_data(message=m.parse_entities(as_html=True))
    text = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n\n' \
           '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"'
    await m.answer(text=text,
                   reply_markup=SubscriptionForVal().get(sub_info), parse_mode=types.ParseMode.HTML)


async def subscription_fail(call: types.CallbackQuery):
    await call.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)


async def subscription_success(call: types.CallbackQuery, user: User, state: FSMContext):
    await call.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    data_state = await state.get_data()
    user_val = data_state["user_val"]
    message = data_state["message"]
    with contextlib.suppress(TelegramAPIError):
        await call.bot.send_message(chat_id=user_val,
                                    text='<b>‚ú® –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ:</b>\n\n' + message,
                                    reply_markup=AnswerVal().get(call.from_user.id))
    bot = await call.bot.get_me()

    from aiogram.utils.markdown import hide_link
    hide = hide_link('http://telegra.ph//file/1d180d530a18ed5c36b4f.mp4')

    text = f'{hide}‚úÖ –ì–æ—Ç–æ–≤–æ, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n' \
           '–ê –µ—Å–ª–∏ —Ç—ã —Ç–æ–∂–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, ' \
           '—Ä–∞–∑–º–µ—Å—Ç–∏ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\n' \
           f'<b>üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b> https://t.me/{bot.username}?start={call.from_user.id}'
    await call.message.edit_text(text=text)
    await state.finish()
    if user.Gender == 0:

        await call.message.answer("‚úàÔ∏è –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=SetGenderKb().get())

    elif user.Age == 0:

        await call.message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")
    else:
        await call.message.answer(text="‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=MainMenuMarkup().get())


async def state_send_message(m: types.Message, state: FSMContext, user: User):
    data_state = await state.get_data()
    user_val = data_state["user_val"]
    with contextlib.suppress(TelegramAPIError):
        await m.bot.send_message(chat_id=user_val,
                                 text='<b>‚ú® –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ:</b>\n\n' + m.parse_entities(as_html=True),

                                 reply_markup=AnswerVal().get(m.chat.id))
    bot = await m.bot.get_me()

    from aiogram.utils.markdown import hide_link
    hide = hide_link('http://telegra.ph//file/1d180d530a18ed5c36b4f.mp4')

    text = f'{hide}‚úÖ –ì–æ—Ç–æ–≤–æ, —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n' \
           '–ê –µ—Å–ª–∏ —Ç—ã —Ç–æ–∂–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, ' \
           '—Ä–∞–∑–º–µ—Å—Ç–∏ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\n' \
           f'<b>üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b> https://t.me/{bot.username}?start={m.chat.id}'
    await m.answer(text=text)
    await state.finish()
    if user.Gender == 0:

        await m.answer("‚úàÔ∏è –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=SetGenderKb().get())

    elif user.Age == 0:

        await m.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")
    else:
        await m.answer(text="‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                       reply_markup=MainMenuMarkup().get())


async def set_start_gender(call: types.CallbackQuery, state: FSMContext, db: sessionmaker, callback_data: dict,
                           user: User):
    gender = callback_data.get("gender")

    async with db() as session:
        await session.execute(update(User).where(User.UserId == user.UserId).values(
            Gender=int(gender)
        ))
        await session.commit()

    with contextlib.suppress(exceptions.TelegramAPIError):
        await state.reset_state()
        await call.message.delete()
        await call.message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")


async def set_start_age(message: types.Message, db: sessionmaker, user: User):
    age = message.text
    try:
        age = int(age)
        if age < 0 or age > 100:
            await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")
        else:
            async with db() as session:
                await session.execute(update(User).where(User.UserId == user.UserId).values(
                    Age=int(age)
                ))
                await session.commit()

            with contextlib.suppress(exceptions.TelegramAPIError):
                # await message.delete()
                await message.answer(text="‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                     reply_markup=MainMenuMarkup().get())

            return

    except ValueError:
        await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")


async def get_start_command_cb(call: types.CallbackQuery, user: User):
    with contextlib.suppress(TelegramAPIError):
        await call.message.delete()
    if user.Gender != 0:
        await call.message.answer("<i>–ù–∞–∂–º–∏</i> /next <i>–∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ!</i>", reply_markup=MainMenuMarkup().get())

    elif user.Gender == 0:

        await call.message.answer("‚úàÔ∏è –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=SetGenderKb().get())

    elif user.Age == 0:

        await call.message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 18</i>")


def setup_start(dp: Dispatcher):
    dp.register_message_handler(get_start_command, commands="start", state='*')

    dp.register_message_handler(get_subscription_msg, is_not_member=True, state=Val.SEND)
    dp.register_callback_query_handler(subscription_fail, text="check_sub", is_not_member=False, state=Val.SEND)
    dp.register_callback_query_handler(subscription_success, text="check_sub", state=Val.SEND)
    dp.register_message_handler(state_send_message, state=Val.SEND)

    dp.register_callback_query_handler(set_start_gender, SetGenderKb.gender_data.filter(), is_not_gender=True)
    dp.register_callback_query_handler(get_start_command_cb, AnswerKb.callback_data.filter())
    dp.register_message_handler(get_start_command, is_not_gender=True)
    dp.register_message_handler(set_start_age, is_not_age=True)
